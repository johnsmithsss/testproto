// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class test;

enum test_type {
  test_type_TYPE_ID_1 = 0,
  test_type_TYPE_ID_2 = 1,
  test_type_TYPE_ID_3 = 2,
  test_type_TYPE_ID_4 = 3,
  test_type_test_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  test_type_test_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool test_type_IsValid(int value);
const test_type test_type_type_MIN = test_type_TYPE_ID_1;
const test_type test_type_type_MAX = test_type_TYPE_ID_4;
const int test_type_type_ARRAYSIZE = test_type_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* test_type_descriptor();
inline const ::std::string& test_type_Name(test_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    test_type_descriptor(), value);
}
inline bool test_type_Parse(
    const ::std::string& name, test_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<test_type>(
    test_type_descriptor(), name, value);
}
// ===================================================================

class test : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test) */ {
 public:
  test();
  virtual ~test();

  test(const test& from);

  inline test& operator=(const test& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const test& default_instance();

  void Swap(test* other);

  // implements Message ----------------------------------------------

  inline test* New() const { return New(NULL); }

  test* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const test& from);
  void MergeFrom(const test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(test* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef test_type type;
  static const type TYPE_ID_1 =
    test_type_TYPE_ID_1;
  static const type TYPE_ID_2 =
    test_type_TYPE_ID_2;
  static const type TYPE_ID_3 =
    test_type_TYPE_ID_3;
  static const type TYPE_ID_4 =
    test_type_TYPE_ID_4;
  static inline bool type_IsValid(int value) {
    return test_type_IsValid(value);
  }
  static const type type_MIN =
    test_type_type_MIN;
  static const type type_MAX =
    test_type_type_MAX;
  static const int type_ARRAYSIZE =
    test_type_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  type_descriptor() {
    return test_type_descriptor();
  }
  static inline const ::std::string& type_Name(type value) {
    return test_type_Name(value);
  }
  static inline bool type_Parse(const ::std::string& name,
      type* value) {
    return test_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 a = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::int32 a() const;
  void set_a(::google::protobuf::int32 value);

  // optional int32 b = 2;
  void clear_b();
  static const int kBFieldNumber = 2;
  ::google::protobuf::int32 b() const;
  void set_b(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:test)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 b_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static test* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// test

// optional int32 a = 1;
inline void test::clear_a() {
  a_ = 0;
}
inline ::google::protobuf::int32 test::a() const {
  // @@protoc_insertion_point(field_get:test.a)
  return a_;
}
inline void test::set_a(::google::protobuf::int32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:test.a)
}

// optional int32 b = 2;
inline void test::clear_b() {
  b_ = 0;
}
inline ::google::protobuf::int32 test::b() const {
  // @@protoc_insertion_point(field_get:test.b)
  return b_;
}
inline void test::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:test.b)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::test_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test_type>() {
  return ::test_type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
